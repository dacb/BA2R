#!/bin/bash

# Copyright (C) 2014
# David A. C. Beck
# dacb@u.washington.edu
# Chemical Engineering & eScience Institute
# University of Washington, Seattle
#
# Date: 12/02/2014
# See version and usage information below
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

PROGNAME=${0##*/}
PROGVERSION=0.1.0

HOME=`dirname $0`

usage()
{
cat << EOF

Usage: $0 [options] <reference genome fasta> <reference genome genbank> <assembly fasta>

This script performs a suite of analyses of a genome assembly against a reference genome.

Options:
EOF
cat << EOF | column -s\& -t
   -h|--help & Show this message
   -v|--version & Show version information
   -d|--database & Name of database <default is BA2R>
   -t|--threads & Number of threads to use for BLAST <default is 1>
   -s|--skip & Skip BLAST if files exist

EOF
}

defined()
{
[ "${!1-one}" == "${!1-two}" ]
}

is_file_readable()
{
	local file=$1
	if [ ! -r $file ]; then
		echo "$0: unable to read file: $file"
		exit 1
	fi
}

is_command_available()
{
	local command=$1
	command -v $command >/dev/null 2>&1 || { echo >&2 "$PROGNAME requires '$command' to be in the current path.  Aborting."; exit 1; }
}

setup_temp_file()
{
	local tmp=`basename $0`
	TMPFILE=`mktemp -q /tmp/${tmp}.XXXXXX`
	if [ $? -ne 0 ]; then
		echo "$0: unable to create temporary file"
		exit 1
	fi
}

makeblastdb_or_skip() {
	local in=$1
	local db=$2
	local title=$3

	if [ ! -z "$SKIP" ] && [ -e $db.nsq ]; then
		echo "* skipping makeblastdb for $in"
	else
		echo "* $in"
		makeblastdb -in $in -dbtype nucl -title "$3" -parse_seqids -hash_index -out $db -logfile $db.makeblastdb.log
	fi
}

run_blastn() {
	local db=$1
	local query=$2
	local out=$3.blast6
	
	if [ ! -z "$SKIP" ] && [ -r $out ]; then
		echo "* skipping BLASTN for query = $query and subject = $db"
	else
		echo "* BLASTing $query against $db"
		blastn -db $db -query $query -outfmt 6 -num_threads $THREADS > $out
	fi
}

blast6_file_to_db()
{
	local table=$1
	local file=$1.blast6
	echo "* $file to $table in $DATABASE"
	cat << EOF | sqlite3 $DATABASE
DROP TABLE IF EXISTS $table;
CREATE TABLE $table (
	qseqid VARCHAR(128) NOT NULL,
	sseqid VARCHAR(128) NOT NULL,
	pident FLOAT NOT NULL,
	length INTEGER UNSIGNED NOT NULL,
	mismatch INTEGER UNSIGNED NOT NULL,
	gapopen INTEGER UNSIGNED NOT NULL,
	qstart INTEGER UNSIGNED NOT NULL,
	qend INTEGER UNSIGNED NOT NULL,
	sstart INTEGER UNSIGNED NOT NULL,
	send INTEGER UNSIGNED NOT NULL,
	evalue DOUBLE NOT NULL,
	bitscore INTEGER UNSIGNED NOT NULL
);
.mode tabs
.import $file $table
CREATE INDEX ${table}_qseqid ON $table (qseqid);
CREATE INDEX ${table}_sseqid ON $table (sseqid);
CREATE INDEX ${table}_full ON $table (qseqid, sseqid, qstart, qend, sstart, send);
EOF
}

extract_tab_from_db()
{
	local table=$1
	local tab=$table.tab
	echo "* $table from $DATABASE to $tab"
	cat << EOF | sqlite3 $DATABASE > $tab
.mode tabs
SELECT * FROM $table WHERE evalue = 0 ORDER BY qseqid, sseqid, qstart;
EOF
}

load_find_results()
{
	local file=$1.find.tab
	local table=${1}_find
	cat << EOF | sqlite3 $DATABASE
DROP TABLE IF EXISTS $table;
CREATE TABLE $table (
	id INTEGER NOT NULL,
	qseqid VARCHAR(128) NOT NULL,
	sseqid VARCHAR(128) NOT NULL,
	qstart INTEGER UNSIGNED NOT NULL,
	qend INTEGER UNSIGNED NOT NULL,
	sstart INTEGER UNSIGNED NOT NULL,
	send INTEGER UNSIGNED NOT NULL
);
.mode tabs
.import $file $table
CREATE INDEX ${table}_id ON $table (id);
CREATE INDEX ${table}_qseqid ON $table (qseqid);
CREATE INDEX ${table}_sseqid ON $table (sseqid);
CREATE INDEX ${table}_full ON $table (qseqid, sseqid, qstart, qend, sstart, send);
EOF
}

# parse arguments
SHORTOPTS="hvsd:t:"
LONGOPTS="help,version,skip,database:,threads:"
ARGS=$(getopt -s bash --options $SHORTOPTS --longoptions $LONGOPTS --name $PROGNAME -- "$@")
if [ $? != 0 ]; then usage; exit 1; fi
eval set -- "$ARGS"
# loop through options
while true; do
        case $1 in
                -h|--help)
                        usage
                        exit 0
                        ;;
                -v|--version)
                        echo "$PROGVERSION"
                        exit 0
                        ;;
                -d|--database)
                        DATABASE=$2
                        shift 2
                        ;;
		-t|--threads)
			THREADS=$2
			shift 2
			;;
		-s|--skip)
			SKIP=1
			shift
			;;
                --) 
                        shift
                        break
                        ;;
                *) 
                        shift
                        break
                        ;;
        esac
done

if [ "$#" -ne 3 ]; then
        usage
        exit 1
fi

defined DATABASE || DATABASE=BA2R.db
defined THREADS || THREADS=1

REF_FASTA=$1
is_file_readable $REF_FASTA
REF_GENBANK=$2
is_file_readable $REF_GENBANK
ASM_FASTA=$3
is_file_readable $ASM_FASTA

FA2SQL=$HOME/fa2sql.awk
is_file_readable $FA2SQL
GB2SQL=$HOME/gb2sql.awk
is_file_readable $GB2SQL
FIND=$HOME/find.awk
is_file_readable $FIND

is_command_available sqlite3
is_command_available makeblastdb
is_command_available blastn

echo "configuration:"
echo "* reference FASTA   = $REF_FASTA"
echo "* reference GENBANK = $REF_GENBANK"
echo "* assembly FASTA    = $ASM_FASTA"
echo "* database name     = $DATABASE"
echo "----"

echo "populating the database from input files:"
if [ -e $DATABASE ]; then
	echo "* skipping loading the database"
else
	echo "* loading $REF_FASTA to table ref_seqs"
	awk -f $FA2SQL -v create_table=1 -v table="ref_seqs" $REF_FASTA | sqlite3 $DATABASE
	echo "* loading $REF_GENBANK to table ref_genes"
	awk -f $GB2SQL -v create_table=1 -v table="ref_genes" $REF_GENBANK | sqlite3 $DATABASE
	echo "* loading $ASM_FASTA to table asm_seqs"
	awk -f $FA2SQL -v create_table=1 -v table="asm_seqs" $ASM_FASTA | sqlite3 $DATABASE
fi
echo "----"

echo "making BLAST databases:"
makeblastdb_or_skip $REF_FASTA reference "Reference genome"
makeblastdb_or_skip $ASM_FASTA assembled "Assembled genome"
echo "running BLASTN: "
run_blastn reference $ASM_FASTA asm_vs_ref
run_blastn assembled $REF_FASTA ref_vs_asm
echo "loading results to SQL table: "
blast6_file_to_db asm_vs_ref
blast6_file_to_db ref_vs_asm
echo "----"

echo "extracting tables for processing:"
extract_tab_from_db asm_vs_ref 
extract_tab_from_db ref_vs_asm
echo "processing table:"
echo " * asm_vs_ref"
awk -F'\t' -f $FIND asm_vs_ref.tab > asm_vs_ref.find.tab
echo " * ref_vs_asm"
awk -F'\t' -f $FIND ref_vs_asm.tab > ref_vs_asm.find.tab
echo "loading processed table results:"
load_find_results asm_vs_ref
load_find_results ref_vs_asm
